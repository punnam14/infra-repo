name: Nightly Deployment 
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          aws configure set region us-east-1
      
      - name: Launch Temporary EC2 for Testing
        run: |
          TEMP_INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927\
            --instance-type t2.micro \
            --key-name github-actions \
            --security-group-ids sg-05c24e6f774bd9b5d \
            --user-data file://setup.sh \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "TEMP_INSTANCE_ID=$TEMP_INSTANCE_ID" >> $GITHUB_ENV
          
      - name: Wait for EC2 Instance to Start
        run: |
          sleep 60  # Wait 60 seconds for EC2 to boot
          TEMP_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.TEMP_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "TEMP_IP=$TEMP_IP" >> $GITHUB_ENV
      
      - name: Save Private Key for SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > github-actions.pem
          chmod 600 github-actions.pem  

      - name: Deploy & Test Application
        run: |
          ssh -o StrictHostKeyChecking=no -i github-actions.pem ec2-user@${{ env.TEMP_IP }} << 'EOF'
          echo "Checking installed versions..."
          git --version || echo "Git NOT installed"
          docker --version || echo "Docker NOT installed"
          docker-compose --version || echo "Docker Compose NOT installed"
          python3 --version || echo "Python3 NOT installed"
          pytest --version || echo "Pytest NOT installed"
          echo "Cloning repository..."
          git clone https://github.com/punnam14/hottake.git
          cd hottake
          echo "Creating .env file..."
          cat <<EOT > .env
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          OPENCAGE_API_KEY=${{ secrets.OPENCAGE_API_KEY }}
          EOT

          echo "Starting application..."
          docker-compose up -d
          sleep 20  

          echo "Running tests..."
          cd backend
          python -m pytest
          exit
          EOF