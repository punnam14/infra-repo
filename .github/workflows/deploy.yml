name: Nightly Deployment 
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          aws configure set region us-east-1
      
      - name: Launch Temporary EC2 for Testing
        run: |
          TEMP_INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927\
            --instance-type t2.micro \
            --key-name github-actions \
            --security-group-ids sg-05c24e6f774bd9b5d \
            --user-data file://setup.sh \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "TEMP_INSTANCE_ID=$TEMP_INSTANCE_ID" >> $GITHUB_ENV
          
      - name: Wait for EC2 Instance to Start
        run: |
          sleep 60  # Wait 60 seconds for EC2 to boot
          TEMP_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.TEMP_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "TEMP_IP=$TEMP_IP" >> $GITHUB_ENV
      
      - name: Save Private Key for SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > github-actions.pem
          chmod 600 github-actions.pem  

      - name: Deploy & Test Application
        env:
          AWS_ECR_BACKEND: ${{ secrets.AWS_ECR_REPO }}
          AWS_ECR_FRONTEND: ${{ secrets.AWS_ECR_REPO_FRONTEND }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENCAGE_API_KEY: ${{ secrets.OPENCAGE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no -i github-actions.pem ec2-user@${{ env.TEMP_IP }} << EOF
          export AWS_ECR_BACKEND="${{ secrets.AWS_ECR_REPO }}"
          export AWS_ECR_FRONTEND="${{ secrets.AWS_ECR_REPO_FRONTEND }}"
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          export OPENCAGE_API_KEY="${{ secrets.OPENCAGE_API_KEY }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"
          
          echo "Checking installed versions..."
          git --version || echo "Git NOT installed"
          python3 --version || echo "Python3 NOT installed"
          pytest --version || echo "Pytest NOT installed"

          echo "🔹 Checking if env are set..."
          echo "AWS_ECR_BACKEND=${AWS_ECR_BACKEND}"
          echo "AWS_ECR_FRONTEND=${AWS_ECR_FRONTEND}"
          echo "DATABASE_URL=${DATABASE_URL}"
          echo "OPENCAGE_API_KEY=${OPENCAGE_API_KEY}"
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"

          cd hottake
          echo "Creating .env file..."
          sudo tee .env > /dev/null <<EOT
          DATABASE_URL=${DATABASE_URL}
          OPENCAGE_API_KEY=${OPENCAGE_API_KEY}
          EOT

          echo "Creating .env file in backend directory..."
          sudo tee backend/.env > /dev/null <<EOT
          DATABASE_URL=${DATABASE_URL}
          OPENCAGE_API_KEY=${OPENCAGE_API_KEY}
          EOT

          echo "Running tests..."
          cd backend
          sudo yum install -y sqlite
          python3 -m pip install -r requirements.txt
          python3 -m pytest --maxfail=1 --disable-warnings --tb=short
          EXIT_CODE=$?  
          echo "Pytest Exit Code: $EXIT_CODE"

          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "❌ Tests FAILED with exit code: $EXIT_CODE"
              exit 1
          else
            echo "✅ Tests PASSED!"
          fi

          echo "🔹 Building frontend..."
          cd /home/ec2-user/hottake/frontend
          npm install
          npm run build

          # Step 2: Ensure build is successful
          if [ ! -d "dist" ]; then
            echo "❌ Frontend build failed! No dist folder found"
            exit 1
          fi
          echo "✅ Frontend build successful!"

          echo "🔹 Checking AWS Credentials..."
          aws sts get-caller-identity || (echo "AWS Credentials Invalid!" && exit 1)

          aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
          aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
          aws configure set aws_session_token ${AWS_SESSION_TOKEN}
          aws configure set region us-east-1

          echo "Authenticating Docker with AWS ECR..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_BACKEND}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_FRONTEND}

          echo "🔹 Building and pushing backend Docker image..."
          cd /home/ec2-user/hottake/backend
          docker build -t hot-take-image .
          docker tag hot-take-image:latest ${AWS_ECR_BACKEND}:latest
          docker push ${AWS_ECR_BACKEND}:latest

          echo "🔹 Packaging frontend dist folder..."
          cd /home/ec2-user/hottake/frontend
          docker build -t frontend-dist -f frontend.Dockerfile .
          docker tag frontend-dist:latest ${AWS_ECR_FRONTEND}:latest
          docker push ${AWS_ECR_FRONTEND}:latest
          echo "✅ Frontend packaged and pushed to ECR"

          EOF
          exit $EXIT_CODE

      - name: Deploy to QA EC2
        env:
          AWS_ECR_BACKEND: ${{ secrets.AWS_ECR_REPO }}
          AWS_ECR_FRONTEND: ${{ secrets.AWS_ECR_REPO_FRONTEND }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENCAGE_API_KEY: ${{ secrets.OPENCAGE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          eval "$(ssh-agent -s)"
          ssh-add github-actions.pem
          ssh -A -o StrictHostKeyChecking=no -i github-actions.pem ec2-user@54.196.94.185 << 'EOF'
          export AWS_ECR_BACKEND="${{ secrets.AWS_ECR_REPO }}"
          export AWS_ECR_FRONTEND="${{ secrets.AWS_ECR_REPO_FRONTEND }}"
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          export OPENCAGE_API_KEY="${{ secrets.OPENCAGE_API_KEY }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"

          ssh ec2-user@172.31.110.113 << 'EOF_Inner'
          export AWS_ECR_BACKEND="${{ secrets.AWS_ECR_REPO }}"
          export AWS_ECR_FRONTEND="${{ secrets.AWS_ECR_REPO_FRONTEND }}"
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          export OPENCAGE_API_KEY="${{ secrets.OPENCAGE_API_KEY }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"

          aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
          aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
          aws configure set aws_session_token ${AWS_SESSION_TOKEN}
          aws configure set region us-east-1

          echo "🔹 Authenticating Docker with AWS ECR..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_BACKEND}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_FRONTEND}

          echo "🔹 Pulling the latest images..."
          docker pull $AWS_ECR_BACKEND:latest
          docker pull $AWS_ECR_FRONTEND:latest

          echo "✅ Image pull complete!"
          
          echo "🔹 Stopping old containers..."
          docker-compose -f docker-compose.prod.yml down

          echo "🔹 Starting new containers..."
          docker-compose -f docker-compose.prod.yml up -d

          echo "✅ Deployment complete!"


          EOF_Inner
          EOF